//给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。
//你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个��组中同样的元素。

//示例:
//给定 nums = [2, 7, 11, 15], target = 9
//因为 nums[0] + nums[1] = 2 + 7 = 9
//所以返回 [0, 1]

class Solution {
  public:
    vector<int> twoSum(vector<int>& nums, int target) {
      /*暴力求解
      vector<int> ret{-1, -1};
      for(int i = 0; i < nums.size(); ++i)
      {
        for(int j = i + 1; j < nums.size(); ++j)
        {
          if(nums[i] + nums[j] == target)
          {
            ret[0] = i;
            ret[1] = j;
            return ret;
          }
        }
      }
      return ret;
      */
      unordered_map<int,int> record;
      for(int i = 0 ; i < nums.size() ; i ++)
      {
        int tmp = target - nums[i];
        if(record.find(tmp) != record.end())//OR if(record.count(tmp))
        {
          /*
          int res[] = {record[tmp], i};
          return vector<int>(res, res + 2);//左闭右开
          */
          return {record[tmp], i};
        }
        record[nums[i]] = i;
      }
      return {-1, -1};
    }
};//Solution end;
