//给定一个字符串 s，找到 s 中最长的回文子串，你可以假设 s 的最大长度为 1000。

class Solution{
public:
  string longestPailndrome(string s){
    /*暴力解法，超出时间限制
    string res; //存放结果
    string temp;//存放子串
    for(int i = 0; i < s.size(); ++i)
    {
      for(int j = i; j < s.size(); ++j)
      {
        temp += s[j];
        string tem = temp;//tem存放子串反转结果
        std::reverse(tem.begin(), tem.end());
        if(temp == tem)
          res = (res.size() > temp.size()) ? res : temp;
      }
      return.clear();
    }
    return res;
    */
    //中心扩展法
    //回文中心的两侧互为镜像。因此，回文可以从它的中心展开，并且只有 2n-1 个这样的中心。
    //一个元素为中心的额情况有 n 个，两个元素为中心的情况有 n-1 个。
    int len = s.size();
    if(len == 0 || len == 1)
      return s;
    int start = 0;//记录回文子串起始位置
    int end = 0;//记录回文子串结束位置
    int mlen = 0;//记录回文子串的最大长度
    for(int i = 0; i < len; ++i)
    {
      int len1 = expendaroundcenter(s, i, i);//一个元素为中心
      int len2 = expendaroundcenter(s, i, i+1);//两个元素为中心
      mlen = std::max(std::max(len1, len2), mlen);
      if(mlen > end-start+1)
      {
        start = i - (mlen-1)/2;
        end = i + mlen/2;
      }
    }
    return s.substr(start, mlen);
  }

private:
  int expendaroundcenter(string &s, int left, int right)
    //计算以left和right为中心的回文串长度
  {
    int L = left;
    int R = right;
    while(L >= 0 && R < s.size() && s[L] == s[R])
    {
      L--;
      R++;
    }
    return R-L-1;
  }
};
